parameters:
- name: version
  displayName: 'Specify build platform version'
  type: string
  default: "current"
- name: appVersion
  displayName: 'Specify build app version'
  type: string
  default: "17.0"

stages:
- stage: Build
  jobs:
  - job: Build
    timeoutInMinutes: 360
    cancelTimeoutInMinutes: 10
    variables:      
      build.clean: all
      platform: x64
      appBuild: $[counter(variables['appVersion'],0)]
      appRevision: 0
      createRuntimePackages: True
      skipComponentGovernanceDetection: True

    steps:
    - checkout: Template
      path: Template

    - task: PowerShell@2
      displayName: 'Reading Settings'
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Read-Settings.ps1'
        arguments: '-appVersion "${{ parameters.appVersion }}.$(appBuild).$(appRevision)" -version ${{ parameters.version }}'
        failOnStderr: true
    
    - task: PowerShell@2
      displayName: 'Install bccontainerhelper'
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Install-bccontainerhelper.ps1'
        failOnStderr: true
    
    - task: PowerShell@2
      displayName: 'Create Build Container'
      env:
        Password: $(Password)
        LicenseFile: $(LicenseFile)
        InsiderSasToken: $(InsiderSasToken)
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Create-Container.ps1'
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Publish Dependencies'
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Publish-Dependencies.ps1'
        arguments: '-skipVerification:$true'
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Compile App'
      env:
        Password: $(Password)
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Compile-App.ps1'
        arguments: '-appFolders "$(appFolders)" -appVersion "${{ parameters.appVersion }}.$(appBuild).$(appRevision)"'
        failOnStderr: true
    
    - task: PowerShell@2
      displayName: 'Compile Test App'
      condition: and(succeeded(),ne(variables['testFolders'],''))
      env:
        Password: $(Password)
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Compile-App.ps1'
        arguments: '-appFolders "$(testFolders)" -appVersion "${{ parameters.appVersion }}.$(appBuild).$(appRevision)"'
        failOnStderr: true
    
    - task: PowerShell@2
      displayName: 'Sign App'
      condition: and(succeeded(),ne(variables['CodeSignPfxFile'],''),ne(variables['CodeSignPfxPassword'],''))
      env:
        codeSignPfxFile: $(CodeSignPfxFile)
        codeSignPfxPassword: $(CodeSignPfxPassword)
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Sign-App.ps1'
        arguments: '-appFolders "$(appFolders)"'
        failOnStderr: true
    
    - task: PowerShell@2
      displayName: 'Publish App'
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Publish-App.ps1'
        arguments: '-appFolders "$(appFolders)" -skipVerification:("$(CodeSignPfxPassword)" -eq "")'
        failOnStderr: true
    
    - task: PowerShell@2
      displayName: 'Publish Test App'
      condition: and(succeeded(),ne(variables['testFolders'],''))
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Publish-App.ps1'
        arguments: '-appFolders "$(testFolders)" -skipVerification'
        failOnStderr: true
     
    - task: PowerShell@2
      displayName: 'Set Test Secret'
      condition: and(succeeded(),ne(variables['TestSecret'],''))
      env:
        TestSecret: $(TestSecret)
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Set-TestSecret.ps1'
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Run Tests'
      condition: and(succeeded(),ne(variables['testFolders'],''))
      env:
        Password: $(Password)
        TestParameters: $(TestParameters)
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Run-Tests.ps1'
        arguments: '-appFolders "$(testFolders)"'
        failOnStderr: true
      
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: and(succeeded(),ne(variables['testFolders'],''))
      inputs:
        testResultsFormat: XUnit
        testResultsFiles: TestResults.xml
        failTaskOnFailedTests: true
    
    - task: PowerShell@2
      displayName: 'Get App RuntimePackage'
      condition: and(succeeded(),eq(variables['createRuntimePackages'],'True'))
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Get-AppRuntimePackage.ps1'
        arguments: '-appFolders "$(appFolders)" -appVersion "${{ parameters.appVersion }}.$(appBuild).$(appRevision)"'
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Sign RuntimePackage'
      condition: and(succeeded(),eq(variables['createRuntimePackages'],'True'),ne(variables['CodeSignPfxFile'],''),ne(variables['CodeSignPfxPassword'],''))
      env:
        codeSignPfxFile: $(CodeSignPfxFile)
        codeSignPfxPassword: $(CodeSignPfxPassword)
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Sign-App.ps1'
        arguments: '-appFolders "$(appFolders)" -buildArtifactFolder "$(Build.ArtifactStagingDirectory)\RuntimePackages"'
        failOnStderr: true
        
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '${{ parameters.appVersion }}'

    - task: PowerShell@1
      displayName: Remove Test App from Artifact Staging Directory
      inputs:
        scriptType: inlineScript
        inlineScript: >
          foreach ($folder in ('$(testFolders)'.Split(','))) {
            Remove-Item (Join-Path '$(Build.ArtifactStagingDirectory)' $folder) -Recurse -Force
          }

    - task: PowerShell@2
      displayName: 'Validate App'
      condition: succeeded()
      env:
        LicenseFile: $(LicenseFile)
        InsiderSasToken: $(InsiderSasToken)
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Validate-App.ps1'
        arguments: '-artifactsFolder "$(Build.ArtifactStagingDirectory)" -appFolders "$(appFolders)" -branchName "$(Build.SourceBranch)" -version ${{ parameters.version }}'
        failOnStderr: true            

    - task: AzureFileCopy@4
      displayName: 'Copy Apps to Azure Blob'
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),eq('${{ parameters.version }}','current'),ne(variables['azureStorageAccount'],''))
      inputs:
        SourcePath: '$(Build.ArtifactStagingDirectory)\*\*.app'
        azureSubscription: 'Visual Studio Ultimate with MSDN (98d9d1ef-c54f-4ae3-b8d2-c8d130103a6c)'
        Destination: AzureBlob
        storage: '$(azureStorageAccount)'
        ContainerName: '$(azureContainerName)'
        BlobPrefix: '$(Build.Repository.Name)'

    - task: AzureFileCopy@4
      displayName: 'Copy Runtime Apps to Azure Blob'
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),eq('${{ parameters.version }}','current'),ne(variables['azureStorageAccount'],''))
      inputs:
        SourcePath: '$(Build.ArtifactStagingDirectory)\RuntimePackages\*\*.app'
        azureSubscription: 'Visual Studio Ultimate with MSDN (98d9d1ef-c54f-4ae3-b8d2-c8d130103a6c)'
        Destination: AzureBlob
        storage: '$(azureStorageAccount)'
        ContainerName: '$(azureContainerName)'
        BlobPrefix: 'Runtime\$(Build.Repository.Name)'

    - task: PowerShell@2
      displayName: 'Upgrade Microsoft Apps in Container'
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),eq('${{ parameters.version }}','current'))
      inputs:
        targetType: filePath
        filePath: 'scripts\Upgrade-MicrosoftApps.ps1'
        arguments: '-QAcontainerName "$(QAContainerName)"'
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Deploy to Environment'
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),eq('${{ parameters.version }}','current'))
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Deploy-App.ps1'
        arguments: '-artifactsFolder "$(Build.ArtifactStagingDirectory)" -appFolders "$(appFolders)" -branchName "$(Build.SourceBranch)"'
        failOnStderr: true
            
    - task: PowerShell@2
      displayName: 'Remove Build Container'
      condition: ne(variables['reuseContainer'],'True')
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Remove-Container.ps1'

    - task: PowerShell@2
      displayName: 'Remove Unused Container Image'
      inputs:
        targetType: filePath
        filePath: 'Template\scripts\Remove-OldDockerImages.ps1'
        
